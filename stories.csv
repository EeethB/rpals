uname,story,story_time,file_type
edgedata,"# EDGE DIY Data

<!-- badges: start -->
[![Travis build status](https://travis-ci.org/EeethB/edgedata.svg?branch=main)](https://travis-ci.org/EeethB/edgedata)
<!-- badges: end -->

",2022-07-07T18:11:24Z,.md
edgedata,"## Versions

Each new benefit year comes with a minor version update, and intra-year updates will typically get a patch version update:

| Benefit Year | Tag    |
| ------------ | ------ |
| 2019         | v0.1.0 |
| 2020         | v0.2.0 |
| 2021         | v0.3.0 |
",2022-07-03T22:17:08Z,.md
rpals_docs,"![](www/rpals_logo.png)

",2022-07-07T01:49:15Z,.md
rpals_docs,"## Future state

Future state is the biggest mess of the whole project! :laughing: I have all kinds of ideas with vastly different scopes, including, but not limited to:

1.  Curated pals list rather than feed of all users
2.  Text and video chatting? I want this to connect people!
3.  Plush toys! (And other merch) Some kind of ""hugging Rs"" where you keep one and send one to a pal
4.  Styling: I want the whole app to channel the energy of the logo - Soft, round, bright, and happy! But I currently don't know nearly enough CSS to pull this off
",2022-07-06T16:36:30Z,.md
rpals_funcs,"action_button_gt <- function(value, inputid, ts, ...) {
  as.character(shiny::actionLink(paste0(value, inputid, ts),
                                   ...)) %>%
    gt::html()
}",2022-07-03T15:15:36Z,.R
rpals_funcs,"
read_user_story <- function(uname, ts) {
  readr::read_csv(""stories.csv"") %>% 
    dplyr::filter(uname == uname, story_time == lubridate::ymd_hms(ts)) %>% 
    purrr::pluck(""story"")
}",2022-07-05T20:09:58Z,.R
rpals_funcs,"
read_creds <- function() {
  readr::read_csv(""creds.csv"")
}",2022-07-04T08:35:27Z,.R
rpals_funcs,NA,2022-07-05T12:23:49Z,.R
libraryethan,"action_button_gt <- function(value, inputid, ts, ...) {
  as.character(shiny::actionLink(paste0(value, inputid, ts),
                                   ...)) %>%
    gt::html()
}

read_user_story <- function(uname, ts) {
  readr::read_csv(""stories.csv"") %>% 
    dplyr::filter(uname == uname, story_time == lubridate::ymd_hms(ts)) %>% 
    purrr::pluck(""story"")
}

open_user_file <- function(text, user, file_ext, session_temp_dir) {
  file_path <- stringr::str_glue(""{session_temp_dir}\\\\@{user}{file_ext}"")
  
  readr::write_file(text, file_path)
  
  rstudioapi::navigateToFile(file_path)
}

read_pals <- function() {
  readr::read_csv(""pals.csv"")
}

read_stories <- function(story_index) {
  readr::read_csv(""stories.csv"") %>%
    dplyr::arrange(desc(story_time)) %>% 
    dplyr::slice((story_index * 5 - 4):(story_index * 5))
}

read_creds <- function() {
  readr::read_csv(""creds.csv"")
}
",2023-10-09T18:56:55Z,.R
ethan,"action_button_gt <- function(value, inputid, ts, ...) {
  as.character(shiny::actionLink(paste0(value, inputid, ts),
                                   ...)) %>%
    gt::html()
}

read_user_story <- function(uname, ts) {
  readr::read_csv(""stories.csv"") %>% 
    dplyr::filter(uname == uname, story_time == lubridate::ymd_hms(ts)) %>% 
    purrr::pluck(""story"")
}

open_user_file <- function(text, user, file_ext, session_temp_dir) {
  file_path <- stringr::str_glue(""{session_temp_dir}\\\\@{user}{file_ext}"")
  
  readr::write_file(text, file_path)
  
  rstudioapi::navigateToFile(file_path)
}

read_pals <- function() {
  readr::read_csv(""pals.csv"")
}

read_stories <- function(story_index) {
  readr::read_csv(""stories.csv"") %>%
    dplyr::arrange(desc(story_time)) %>% 
    dplyr::slice((story_index * 5 - 4):(story_index * 5))
}

read_creds <- function() {
  readr::read_csv(""creds.csv"")
}
",2023-10-10T19:00:41Z,.R
