uname,story,story_time
edgedata,"# EDGE DIY Data

<!-- badges: start -->
[![Travis build status](https://travis-ci.org/EeethB/edgedata.svg?branch=main)](https://travis-ci.org/EeethB/edgedata)
<!-- badges: end -->
",2022-07-05T12:06:27Z
edgedata,"## Installation

`edgedata` can be installed from CRAN:

```
install.packages(""edgedata"")
```

You can also get the development version from Github:

```
remotes::install_github(""EeethB/edgedata"")
```

Specific versions can be installed from Github using their tags. For example, the final version using 2019 coefficients is `v0.1.0`:

```
remotes::install_github(""EeethB/edgedata@v0.1.0"")
```

See below for a table of versions corresponding to benefit years.
",2022-07-04T05:34:32Z
edgedata,"## Summary

An R package containing the data that supports the CMS External Data Gathering Environment (EDGE) Server DIY algorithm
",2022-07-07T17:36:45Z
edgedata,"## Background

When the Patient Protection and Affordable Care Act (PPACA, often just ACA, or Obamacare) was passed, health insurance issuers could no longer vary individual or small group premiums at the individual or group level due to risk. Thus if an issuer attracted greater than average risk, they would have to raise premiums for their entire individual and/or small group block, which would then push healthier members away, further increasing premiums. This is known as adverse selection.

The risk adjustment (RA) program was implemented to mitigate the risk of adverse selection. In RA, issuers with lower than average risk are required to transfer funds to issuers with higher than average risk. The total money transferred is budget-neutral so that there will always be enough money for the transfers. In order to calculate relative risk, issuers need a way to submit their enrollment, premium, and claims data to the federal government.

The Centers for Medicare and Medicaid Services (CMS) requires that issuers maintain an External Data Gathering Environment (EDGE) Server for RA. Data on the EDGE Servers is used to ultimately calculate the RA transfer payments. In order for issuers to QA EDGE submissions and to have a more transparent process to troubleshoot, CMS provides the EDGE DIY software, which allows issuers to calculate their risk score separately from the normal EDGE process.

The software is provided only in SAS format, and this package is the start of implementing it in R. This package provides the datasets used to support the DIY software.
",2022-07-05T08:08:21Z
edgedata,"## Versions

Each new benefit year comes with a minor version update, and intra-year updates will typically get a patch version update:

| Benefit Year | Tag    |
| ------------ | ------ |
| 2019         | v0.1.0 |
| 2020         | v0.2.0 |
| 2021         | v0.3.0 |
",2022-07-05T17:11:07Z
rpals_docs,"![](www/rpals_logo.png)
",2022-07-06T02:36:02Z
rpals_docs,"# Stories are here for RStudio! :tada:

Inspired by Ben Awad's [VS Code Stories](https://github.com/ide-stories/vscode-stories) (And because people sharing code makes me happy :blush:), {rpals} seeks to be an ultra-low-barrier-to-entry space for people to share their code with the R :earth_africa:

If you like {rpals} and would like to support its development, you can

[![""Buy Me A Coffee""](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/EeethB)
",2022-07-07T11:45:23Z
rpals_docs,"## Installation

I haven't even made this a package yet, so you can play around with {rpals} by downloading or cloning this repository and running app2.R with RStudio. It is designed to be run from RStudio and viewed in the Viewer pane. It may break if run in other ways :shrug:
",2022-07-06T13:51:42Z
rpals_docs,"## Current state

{rpals} currently has a very rough, mostly functional UI. The bulk of the UI layout is there, but it needs some re-arranging and a bunch of styling. I want it to have some :sparkles: flair :sparkles:
",2022-07-05T06:22:07Z
rpals_docs,"## MVP

I think the only thing left to reach a minimal UI is adding a way to actually share your code. Right now you can only read in code from the shared code table I made up. I think at least a ""share from clipboard"" and a ""share from current file"" would be good

Minimal backend might just be dropping CSVs into an S3 bucket for now. My biggest concern here will be auth. Can I create an ""rpals"" user in AWS who only has read and write access, but not drop access? Since this is going to be distributed as an add-in, not a hosted app, anyone who downloads it will be able to see the S3/DB interaction code and could theoretically use it to mess with my storage system, I think :unamused: So that seems not great
",2022-07-03T03:55:53Z
rpals_docs,"## Future state

Future state is the biggest mess of the whole project! :laughing: I have all kinds of ideas with vastly different scopes, including, but not limited to:

1.  Curated pals list rather than feed of all users
2.  Text and video chatting? I want this to connect people!
3.  Plush toys! (And other merch) Some kind of ""hugging Rs"" where you keep one and send one to a pal
4.  Styling: I want the whole app to channel the energy of the logo - Soft, round, bright, and happy! But I currently don't know nearly enough CSS to pull this off
",2022-07-05T09:02:03Z
rpals_funcs,"action_button_gt <- function(value, inputid, ...) {
  as.character(shiny::actionLink(paste0(value, inputid),
                                   ...)) %>%
    gt::html()
}",2022-07-07T18:54:50Z
rpals_funcs,"
open_user_file <- function(text, user, session_temp_dir) {
  file_path <- stringr::str_glue(""{session_temp_dir}\\\\@{user}.R"")
  
  readr::write_file(text, file_path)
  
  rstudioapi::navigateToFile(file_path)
}",2022-07-03T08:36:30Z
rpals_funcs,"
read_pals <- function() {
  readr::read_csv(""pals.csv"")
}",2022-07-05T15:42:37Z
rpals_funcs,"
read_stories <- function() {
  readr::read_csv(""stories.csv"")
}",2022-07-03T07:44:23Z
